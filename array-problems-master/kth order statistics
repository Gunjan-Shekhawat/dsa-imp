https://practice.geeksforgeeks.org/problems/kth-smallest-element/0


#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;

ll divide(ll A[], ll l, ll r, ll k){
    if(r>l){
    
        // to make algorithm run in O(n) we have to use random pivoting
        ll a = (rand()%(r-l)) + l;
        
        // swap it with first element 
        swap(A[l],A[a]);
        ll p=A[l];
        ll i=l+1;
        for(ll j=l+1;j<=r;j++){
        
            // all the elements which are smaller than pivot must be before the pivot element
            // and higher elements must be after the pivot element
            if(A[j]<p){
                swap(A[i], A[j]);
                i+=1;
            }
        }
        // check if the pivot position is our required statistic
        if(i==k){
            return A[l];
        }
        swap(A[l],A[i-1]);
        
        // if statistic is greater recurse for the next half
        if(k>i){
            return divide(A,i,r,k);
        }
        
        // if statistic is smaller recurse for the first half
        return divide(A,l,i-2,k);
    }
    if(r==l){
        return A[l];
    }
    return 0;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	ll t;
	cin>>t;
	while(t--){
	    ll n;
	    cin>>n;
	    ll A[n];
	    for(ll i=0;i<n;i++){
	        cin>>A[i];
	    }
	    ll k;
	    cin>>k;
      
      // quick sort partitioning method as it fixes the position for pivot and we check
      // if the pivot position is our required position or not and recurse accordingly
	    cout<<divide(A,0ll,n-1,k)<<endl;
	}
	
	return 0;
}
