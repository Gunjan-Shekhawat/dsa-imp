https://practice.geeksforgeeks.org/problems/sum-of-bit-differences/0


#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;

void countset(ll x, map<ll, ll> &m){
    ll i=1;
    while(x){
        if(x%2!=0){
            m[i]+=1;
        }
        x/=2;
        i+=1;
    }
} 
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll t;
    cin>>t;
    while(t--){
        ll n;
        cin>>n;
        ll A[n];
        for(ll i=0;i<n;i++){
            cin>>A[i];
        }
        map<ll, ll> m;
        for(ll i=0;i<n;i++){
        
            // count the number of elements whose ith bit is set 
            // and store the count for every position
            countset(A[i], m);
        }
        ll c=0;
        for(auto i:m){
            ll a = n-i.second;
            
            // as for ith position on c elements bit are set and by doing 
            // the combinotorics we can find the sum for this position which is
            // nothing but choosing one from set bit count and one from non-set bit count
            // and multiplying it by 2 as we can have both side pairs
            c+=(i.second*a*2);
        }
        cout<<c<<endl;
    }
	return 0;
}
