https://practice.geeksforgeeks.org/problems/sum-of-all-substrings-of-a-number/0

------------METHOD 1-----------------------------------------------------------------------

Example : num = "1234"
sumofdigit[0] = 1 = 1
sumofdigit[1] = 2 + 12  = 14
sumofdigit[2] = 3 + 23  + 123 = 149
sumofdigit[3] = 4 + 34  + 234 + 1234  = 1506
Result = 1670

For above example,
sumofdigit[3] = 4 + 34 + 234 + 1234
           = 4 + 30 + 4 + 230 + 4 + 1230 + 4
           = 4*4 + 10*(3 + 23 +123)
           = 4*4 + 10*(sumofdigit[2])
In general, 
sumofdigit[i]  =  (i+1)*num[i] + 10*sumofdigit[i-1]


#include <bits/stdc++.h>
using namespace std;
typedef unsigned long long int ll;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	ll t;
	cin>>t;
	while(t--){
	    string s;
	    cin>>s;
	    ll n = s.length(); 
  
      // allocate memory equal to length of string 
      ll sumofdigit[n]; 

      // initialize first value with first digit 
      sumofdigit[0] = s[0]-'0'; 
      ll res = sumofdigit[0]; 

      // loop over all digits of string 
      for (ll i = 1; i < n; i++) { 
          ll numi = s[i]-'0'; 

          // update each sumofdigit from previous value 
          sumofdigit[i] = (i + 1) * numi + 10 * sumofdigit[i - 1]; 

          // add current value to the result 
          res += sumofdigit[i]; 
      } 
	    cout<<res<<endl;
	}
	
	return 0;
}



---------------------------METHOD 2--------------------------------------------------

Let number be s = “6759”

        1    10    100    1000
    6   1     1      1       1
    7   2     2      2
    5   3     3
    9   4
The above table indicates that, when all the substrings are converted further to the ones, tens, hundreds etc.. 
form, each index of the string will have some fixed occurrence.
The 1st index will have 1 occurrence each of ones, tens etc..The 2nd will have 2, 3rd will have 3 and so on.

sum = 6*(1*1 + 1*10 + 1*100 + 1*1000) + 7*(2*1 + 2*10 + 2*100) + 
      5*(3*1 + 3*10) + 9*(4*1)
    = 6*1*(1111) + 7*2*(111) + 5*3*(11) + 9*4*(1)
    = 6666 + 1554 + 165 + 36
    = 8421
    
int sumOfSubstrings(string num) {

    long long int sum = 0; // Initialize result 
  
    // Here traversing the array in reverse 
    // order.Initializing loop from last 
    // element. 
    // mf is multiplying factor. 
    long long int mf = 1; 
    for (int i=num.size()-1; i>=0; i--) {
    
        // Each time sum is added to its previous 
        // sum. Multiplying the three factors as 
        // explained above. 
        // s[i]-'0' is done to convert char to int. 
        sum += (num[i]-'0')*(i+1)*mf; 
  
        // Making new multiplying factor as 
        // explained above. 
        mf = mf*10 + 1; 
    } 
  
    return sum; 
} 
