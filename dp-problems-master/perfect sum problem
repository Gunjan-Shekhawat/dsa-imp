https://practice.geeksforgeeks.org/problems/perfect-sum-problem/0


#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	ll t;
	cin>>t;
	while(t--){
	    ll n;
	    cin>>n;
	    ll A[n];
	    for(ll i=0;i<n;i++){
	        cin>>A[i];
	    }
	    ll m;
	    cin>>m;
	    // rows represent the length of array in use
	    // col represent the sum to be formed using the length
	    vector< vector<ll> > dp(n, vector<ll>(m+1,0));
	    
	    //for 0 sum 1 subset of length is always there
	    for(ll i=0;i<n;i++){
	        dp[i][0]=1;
	    }
	    
	    // length 1 we can have sum equal to the value
	    for(ll i=1;i<=m;i++){
	        if(A[0]==i){
	            dp[0][i]=1;
	        }
	    }
	    
	    // for rest of the lengths array
	    for(ll i=1;i<n;i++){
	        for(ll j=1;j<=m;j++){
	            if(A[i]>j){
	                
            // if sum is less than the curr value it means we
            // can't include this particular value we have to take
            // the answer from the previous length
	                dp[i][j]=dp[i-1][j]%1000000007;
	            } else{
	                
	                // if sum is greater than the current value
	                // then we have 2 choices either to include
	                // this value or exclude.
	                // If we include this
	                // value than we have to take count of remaining
	                // sum from the remaining length which from the 
	                // previous length.
	                // If we exclude this value then simply take the
	                // the count of this sum from the remaining 
	                // length array or from the previous.
	                dp[i][j] = (dp[i-1][j-A[i]]+dp[i-1][j])%1000000007;
	            }
	        }
	    }
	   // for(ll i=0;i<n;i++){
	   //     for(ll j=0;j<=m;j++){
	   //         cout<<dp[i][j]<<" ";
	   //     }
	   //     cout<<endl;
	   // }
	    cout<<dp[n-1][m]<<endl;
	}
	
	return 0;
}
