vector <int> max_of_subarrays(int *arr, int n, int k){
    // your code here
    deque<int> q;
    for(int i=0;i<k;i++){
    
        // remove all the elements which are less than the curr element as they are not useful for calculating the maximum
        while(!q.empty() && arr[i]>=arr[q.back()]){
            q.pop_back();
        }
        q.push_back(i);
    }
    vector<int> v;
    for(int i=k;i<n;i++){
    
        // front will be the maximum for that particular window
        v.push_back(arr[q.front()]);
        
        // remove all the elements which are out of the curr window from the front
        while(!q.empty() && q.front()<=i-k){
            q.pop_front();
        }
        
        // remove all the elements which are less than the curr element as they are not useful for calculating the maximum
        while(!q.empty() && arr[i]>=arr[q.back()]){
            q.pop_back();
        }
        q.push_back(i);
    }
    
    // push the last window max element
    v.push_back(arr[q.front()]);
    return v;
}
