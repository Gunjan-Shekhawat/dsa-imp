===========================METHOD 1 - By making pop costly==========================


/* The structure of the class is
class StackQueue{
private:   
    // These are STL stacks ( http://goo.gl/LxlRZQ )
    stack<int> s1;
    stack<int> s2;
public:
    void push(int);
    int pop();
}; */

/* The method push to push element into the queue */
void StackQueue :: push(int x)
 {
        // Your Code
        
        // simply push new element in the first stack
        s1.push(x);
 }

/*The method pop which return the element poped out of the queue*/
int StackQueue :: pop()
{
        // Your Code
        int x=-1;
        
        // pop out the top element of stack 2 if it is empty push everything from stack 1 into stack 2 and then pop out the first element 
        if(!s2.empty()){
            x = s2.top();
            s2.pop();
        } else{
            while(!s1.empty()){
                s2.push(s1.top());
                s1.pop();
            }
            if(!s2.empty()){
                x = s2.top();
                s2.pop();
            }
        }
        return x;
}

===========================================================================================
METHOD 1 is more efficient in terms of performance as it requires one time moving of all the elements
that is even too when the stack 2 is empty but in METHOD 2 we move all elements twice in every
push operation which makes is less efficient
===========================================================================================

============================METHOD 2- By making push costly=================================


/* The structure of the class is
class StackQueue{
private:   
    // These are STL stacks ( http://goo.gl/LxlRZQ )
    stack<int> s1;
    stack<int> s2;
public:
    void push(int);
    int pop();
}; */

/* The method push to push element into the queue */
void StackQueue :: push(int x)
 {
        // Your Code
        
        // push everything from stack 1 to stack 2
        while(!s1.empty()){
            s2.push(s1.top());
            s1.pop();
        }
        
        // push new element into the stack 1
        s1.push(x);
        
        // again push everything from stack 2 into stack 1
        // this maintains the order of FIFO
        while(!s2.empty()){
            s1.push(s2.top());
            s2.pop();
        }
 }

/*The method pop which return the element poped out of the queue*/
int StackQueue :: pop()
{
        // Your Code
        int x=-1;
        
        // pop the top element from the stack 1 if present as we are moving every thing to stack 1
        if(!s1.empty()){
            x = s1.top();
            s1.pop();
        }
        return x;
}
