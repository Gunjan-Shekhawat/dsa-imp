https://practice.geeksforgeeks.org/problems/rotten-oranges/0


#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;

bool check(ll x, ll y, ll n, ll m){
    if(x<0 || y<0 || x>=n || y>=m){
        return false;
    }
    return true;
}

int main(){

	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	ll t;
	cin>>t;
	while(t--){
	    ll n,m;
	    cin>>n>>m;
	    ll A[n][m],c1=0;
	    queue< pair<ll, ll> > q;
	    for(ll i=0;i<n;i++){
	        for(ll j=0;j<m;j++){
	            cin>>A[i][j];
	            if(A[i][j]==2){
	                q.push(make_pair(i,j));
	            } else if(A[i][j]==1){
	                c1+=1;
	            }
	        }
	    }
      
      // just like level order traversal of tree
	    q.push(make_pair(-1,-1));
	    ll c=0;
	    while(!q.empty()){
	        ll x = q.front().first, y = q.front().second;
	        q.pop();
	        if(x==-1){
	            if(!q.empty()){
	                q.push(make_pair(-1, -1));
	                c+=1;
	            }
	        } else{
	            if(check(x-1, y, n, m) && A[x-1][y]==1){
	                A[x-1][y]=2;
	                c1-=1;
	                q.push(make_pair(x-1, y));
	            }
	            if(check(x+1, y, n, m) && A[x+1][y]==1){
	                c1-=1;
	                A[x+1][y]=2;
	                q.push(make_pair(x+1, y));
	            }
	            if(check(x, y-1, n, m) && A[x][y-1]==1){
	                A[x][y-1]=2;
	                c1-=1;
	                q.push(make_pair(x, y-1));
	            }
	            if(check(x, y+1, n, m) && A[x][y+1]==1){
	                A[x][y+1]=2;
	                c1-=1;
	                q.push(make_pair(x, y+1));
	            }
	        }
	    }
	    if(c1==0){
	        cout<<c<<endl;
	    } else{
	        cout<<-1<<endl;
	    }
	}
	
	return 0;
}
