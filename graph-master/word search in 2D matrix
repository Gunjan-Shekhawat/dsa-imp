https://leetcode.com/explore/challenge/card/july-leetcoding-challenge/546/week-3-july-15th-july-21st/3397/


class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        vector< vector<bool> > vis(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<board[i].size();j++){
                vis[i].push_back(false);
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<board[i].size();j++){
            
                // checking for different occurence of first letter
                if(board[i][j]==word[0]){
                
                    // if any of them returns true means our word has found
                    if(dfs(board, vis, i, j, word, 1)){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    bool check(int x, int y, int r, int c){
        if(x<0 || y<0 || x>=r || y>=c){
            return false;
        }
        return true;
    }
    
    bool dfs(vector< vector<char> > &A, vector< vector<bool> > &vis, int x, int y, string &word, int k){
        
        // append current position to the recursion stack
        vis[x][y]=true;
        
        // check if index to be searched is equal to the length then return true
        if(k==word.length()){
            return true;
        }
        
        // check in neighbouring cells if you have what you require right now
        bool a;
        if(check(x-1,y,A.size(), A[x].size()) && !vis[x-1][y] && A[x-1][y]==word[k]){
            a = dfs(A,vis,x-1,y,word,k+1);
        }
        if(!a){
            if(check(x+1,y,A.size(), A[x].size()) && !vis[x+1][y] && A[x+1][y]==word[k]){
                a = dfs(A,vis,x+1,y,word,k+1);
            }
        }
        if(!a){   
            if(check(x,y-1,A.size(), A[x].size()) && !vis[x][y-1] && A[x][y-1]==word[k]){
                a = dfs(A,vis,x,y-1,word,k+1);
            }
        }
        if(!a){
            if(check(x,y+1,A.size(), A[x].size()) && !vis[x][y+1] && A[x][y+1]==word[k]){
                a = dfs(A,vis,x,y+1,word,k+1);
            }
        }
        
        // if you found the curr char in any of the neighbouring cells return true
        if(a){
            return true;
        }
        
        // if you haven't found the current char in any of the cells just return false and pop back the curr cell from the recursion stack
        vis[x][y]=false;
        return false;
    }
};
