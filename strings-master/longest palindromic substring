string Solution::longestPalindrome(string A) {
    int start=0,end=0,m=1,n=A.length();
    for(int i=0;i<n-1;i++){
        if(A[i]==A[i+1]){
            m=2;
            start=i;
            end=i+1;
        }
    }
    for(int i=1;i<n-1;i++){
        int j=i-1,k=i+1,c=1;
        while(j>=0 && k<n){
            if(A[j]!=A[k]){
                break;
            }
            c+=2;
            j-=1;
            k+=1;
        }
        if(j<0 && k>=n){
            if(c>m){
                m=c;
                start=(j<0?0:j);
                end=(k==n?n-1:k);
            }
        } else if(j<0){
            if(c>m){
                m=c;
                start=0;
                end=k-1;
            }
        } else if(k==n){
            if(c>m){
                m=c;
                start=j+1;
                end=n-1;
            }
        } else{
            if(c>m){
                m=c;
                start=j+1;
                end=k-1;
            }
        }
    }
    for(int i=1;i<n-2;i++){
        if(A[i]==A[i+1]){
            int j=i-1,k=i+2,c=2;
            while(j>=0 && k<n){
                if(A[j]!=A[k]){
                    break;
                }
                c+=2;
                j-=1;
                k+=1;
            }
            if(j<0 && k>=n){
                if(c>m){
                    m=c;
                    start=(j<0?0:j);
                    end=(k==n?n-1:k);
                }
            } else if(j<0){
                if(c>m){
                    m=c;
                    start=0;
                    end=k-1;
                }
            } else if(k==n){
                if(c>m){
                    m=c;
                    start=j+1;
                    end=n-1;
                }
            } else{
                if(c>m){
                    m=c;
                    start=j+1;
                    end=k-1;
                }
            }
        }
    }
    string s="";
    for(int i=start;i<=end;i++){
        s+=A[i];
    }
    return s;
}
